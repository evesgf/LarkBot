<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tungsten.Domains</name>
    </assembly>
    <members>
        <member name="M:W.Domains.AssemblyLoader.Load(System.AppDomain,System.String)">
            <summary>
            Loads a dll into the new AppDomain
            </summary>
        </member>
        <member name="M:W.Domains.AssemblyLoader.Load(System.AppDomain,System.String,System.String)">
            <summary>
            Loads dlls into the new AppDomain
            </summary>
        </member>
        <member name="M:W.Domains.AssemblyLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any parameters to be passedd to the static method</param>
            <returns>The return value from the function, casted to TResult.</returns>
        </member>
        <member name="M:W.Domains.AssemblyLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any arguments to be passedd to the static method</param>
        </member>
        <member name="M:W.Domains.AssemblyLoader.Execute``1(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
            <returns>The return value from the function, casted to TResult</returns>
        </member>
        <member name="M:W.Domains.AssemblyLoader.Execute(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
        </member>
        <member name="M:W.Domains.AssemblyLoader.Create``1(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <typeparam name="TInterfaceType">The handle to the class is automatically cast to the interfafce TInterfaceType</typeparam>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:W.Domains.AssemblyLoader.Create(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="T:W.Domains.DomainLoader">
            <summary>
            An AppDomain helper class which makes it easy to host relodable AppDomains.  Supports ShadowCopy.
            </summary>
        </member>
        <member name="P:W.Domains.DomainLoader.DomainName">
            <summary>
            The name of the new AppDomain
            </summary>
        </member>
        <member name="M:W.Domains.DomainLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an AppDomain under the current AppDomain
            </summary>
            <param name="relativeSubFolderForDomain">The relative path to the subfolder which will be the root folder for the new AppDomain</param>
            <param name="useShadowCopy">True to shadow copy files.  This allows dlls to be added, removed or modified while the AppDomain is still loaded.</param>
        </member>
        <member name="M:W.Domains.DomainLoader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates an AppDomain under the current AppDomain
            </summary>
            <param name="domainName">The name for the domain.  If not assigned, or null or empty, a Guid is assigned.</param>
            <param name="relativeSubFolderForDomain">The relative path to the subfolder which will be the root folder for the new AppDomain</param>
            <param name="useShadowCopy">True to shadow copy files.  This allows dlls to be added, removed or modified while the AppDomain is still loaded.</param>
        </member>
        <member name="M:W.Domains.DomainLoader.Finalize">
            <summary>
            Destructs the DomainLoader instance.  Calls Dispose.
            </summary>
        </member>
        <member name="M:W.Domains.DomainLoader.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:W.Domains.DomainLoader.Unload">
            <summary>
            Unloads the AppDomain and deletes files in the cache folder.  The cache folder is where dlls are copied, and run, when using shadow copying.
            </summary>
        </member>
        <member name="M:W.Domains.DomainLoader.Load">
            <summary>
            Loads the dlls into the new AppDomain
            </summary>
        </member>
        <member name="M:W.Domains.DomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any parameters to be passedd to the static method</param>
            <returns>The return value from the function, casted to TResult.</returns>
        </member>
        <member name="M:W.Domains.DomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any arguments to be passedd to the static method</param>
        </member>
        <member name="M:W.Domains.DomainLoader.Execute``1(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
            <returns>The return value from the function, casted to TResult</returns>
        </member>
        <member name="M:W.Domains.DomainLoader.Execute(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
        </member>
        <member name="M:W.Domains.DomainLoader.Create``1(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <typeparam name="TInterfaceType">The handle to the class is automatically cast to the interfafce TInterfaceType</typeparam>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:W.Domains.DomainLoader.Create(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:W.Domains.DomainLoader.DoCallback(System.Action)">
            <summary>
            Executes an action in the context of the hosted AppDomain
            </summary>
            <param name="action">The action to be called in the context of the hosted AppDomain</param>
        </member>
        <member name="M:W.Domains.DomainLoader.SetData(System.String,System.Object)">
            <summary>
            Sets the value of the specified application domain property
            </summary>
            <param name="name">The name of a predefined or custom domain property</param>
            <param name="data">The value to be assigned to the domain property</param>
        </member>
        <member name="M:W.Domains.DomainLoader.GetData``1(System.String)">
            <summary>
            Gets the value stored in the current application domain for the specified name
            </summary>
            <param name="name">The name of a predefined or custom domain property</param>
            <typeparam name="TData">The type of data to be returned</typeparam>
            <returns>The data stored in the domain property as cast to T</returns>
        </member>
    </members>
</doc>
